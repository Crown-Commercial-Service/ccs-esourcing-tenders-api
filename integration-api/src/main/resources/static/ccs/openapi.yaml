openapi: 3.0.0
info:
  description: |
    This is the Crown Commercial Service API definition.
  version: "v0_4"
  title: Crown Commercial Service
  termsOfService: https://www.crowncommercial.gov.uk/
  contact:
    email: api@crowncommercial.gov.uk
  license:
    name: Open Government Licence 3.0
    url: http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/
servers:
  # Added by API Auto Mocking Plugin
  - description: CCS API Automock (for SBX)
    url: https://virtserver.swaggerhub.com/Crown-Commercial/crown-commercial-service/v0_4
tags:
  - name: tender
    description: An Invitation to Tender (ITT) as defined by CCS
    externalDocs:
      description: CCS Tendering Process
      url: 'https://www.gov.uk/government/publications/become-a-crown-commercial-service-supplier/becoming-a-supplier-through-the-crown-commercial-service-what-you-need-to-know#tendering-for-opportunities--how-it-works'
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  /tenders:
    post:
      tags:
        - tender
        - itt
      summary: Create an invitiation to tender i.e. a sourcing event
      description: >-
        Creates a CCS invitation to tender on the sourcing platform for a given
        procurement case.
      operationId: createTender
      responses:
        201:
          description: tender created
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectCode:
                    type: string
                    description: project code (project id)
                    example: "TESTPROJECT99"
                  ittCode:
                    type: string
                    description: the itt code (tender id)
                    example: "TESTITT100"
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Procurement'
        description: Created sourcing object
        required: true
  /tenders/status:
    get:
      tags:
        - tender
      summary: Get tenders by status
      description: Returns list of tenders for a given status
      operationId: getTenders
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  '/tenders/{id}':
    get:
      tags:
        - tender
      summary: Find a tender by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
        values will generated exceptions
      operationId: getTenderById
      parameters:
        - name: id
          in: path
          description: ID of the tender that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tender'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tender'
        '400':
          description: Invalid ID supplied
        '404':
          description: Tender not found
    delete:
      tags:
        - tender
      summary: (Soft) Delete tender by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteTender
      parameters:
        - name: id
          in: path
          description: ID of the tender that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Tender not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'

components:
  schemas:
    Tender:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 8
        description:
          type: string
          example: "Tender - Laptops for Schools"
        status:
          type: integer
          format: int32
          description: Invitation to Tender Sourcing Event Status
          example: "Invitation to Tender"
      xml:
        name: Tender
    Procurement:
      type: object
      required:
        - reference
        - subject
        - route
        - commercialAgreement
        - commercialAgreementLot
        - ittPlannedStartDate
        - ittPlannedEndDate
      properties:
        reference:
          type: string
          example: AB123456
          description: The primary identifier of the procurement case
        subject:
          type: string
          description: Title of the procurement case
          example: Laptops for School
        route:
          type: string
          description: Label indicating the process the procurement case must follow
          example: Call Off (Competition)
          enum:
            - Call Off (Competition)
            - Call Off (Direct Award)
            - Open Market
            - Single Tender Action
        ittPlannedStartDate:
          type: string
          format: date
          description: The date this procurement is planned to go out to tender
          example: '2019-10-01'
        ittPlannedEndDate:
          type: string
          format: date
          description: The date the tender is planned or required to close
          example: '2019-12-01'
        organisation:
          type: string
          description: The organisation requesting the procurement
          example: Bristol City Council
        commercialAgreement:
          type: string
          description: Also known as a framework
        commercialAgreementLot:
          type: string
          description: Also known as a framework lot
        CommonAreaofSpendCategory:
          $ref: '#/components/schemas/CommonAreaofSpendCategory'
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
      xml:
        name: Procurement

    CommonAreaofSpendCategory:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: CommonAreaofSpendCategory
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://TBD.crowncommercial.gov.uk/authorise'
          scopes:
            'write:tenders': create and update tenders
            'read:tenders': read tenders
    api_key:
      type: apiKey
      name: api_key
      in: header